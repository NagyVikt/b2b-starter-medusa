version: "3.8"

services:
  postgres:
    image: postgres:17-alpine
    container_name: medusa_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - medusa_network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h 127.0.0.1 || exit 1",
        ]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 20s

  redis:
    image: redis:7-alpine
    container_name: medusa_redis
    restart: unless-stopped
    ports: ["6379:6379"]
    networks: [medusa_network, coolify]

  medusa:
    build: .
    container_name: medusa_backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    environment:
      NODE_ENV: development
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
    env_file:
      - .env
    volumes:
      - .:/server
      - /server/node_modules
    networks: [medusa_network, coolify]
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=coolify"
      - "traefik.http.services.medusa.loadbalancer.server.port=9000"
      - "traefik.http.routers.medusa-https.rule=Host(`admin.teherguminet.hu`)"
      - "traefik.http.routers.medusa-https.entrypoints=https"
      - "traefik.http.routers.medusa-https.tls=true"
      - "traefik.http.routers.medusa-https.tls.certresolver=letsencrypt"
      - "traefik.http.routers.medusa-https.service=medusa"
      - "traefik.http.routers.medusa-https.priority=10"

volumes:
  postgres_data:

networks:
  medusa_network:
    driver: bridge
  coolify:
    external: true
